# This is a basic workflow to help you get started with Actions

name: Terraform AKS Deploy

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      ENVIRONMENT:
        description: 'Environment to deploy (dev, prod, stage)'
        required: true
        type: choice
        options:
          - Dev
          - Prod
          - Stage

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      STATE_FILE: "${{ inputs.ENVIRONMENT }}.tfstate"
      TF_VAR_AZURE_CLIENT_ID: ${{secrets.AZURE_CLIENT_ID }}
      TF_VAR_AZURE_CLIENT_SECRET: ${{secrets.AZURE_CLIENT_SECRET }}
      TF_VAR_AZURE_SUBSCRIPTION_ID: ${{secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_AZURE_TENANT_ID: ${{secrets.AZURE_TENANT_ID }}
      TF_VAR_AZURE_CLIENT_OBJECT_ID: ${{secrets.AZURE_CLIENT_OBJECT_ID}}
      TF_VAR_resource_group: ${{ inputs.RESOURCE_GROUP_OVERRIDE || (inputs.ENVIRONMENT == 'dev' && 'dev-rg') ||  (inputs.ENVIRONMENT == 'prod' && 'prod-rg')  || (inputs.ENVIRONMENT == 'stage' && 'stage-rg') }}
      # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'  # Specify the Python version you need      
      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
      
      # Terraform Plan
      - name: Terraform Plan
        working-directory: ${{ inputs.ENVIRONMENT }}  # Runs in Dev/, Prod/, or Stage/
        run: |
          terraform init
          terraform plan -out=tfplan
      
      # Terraform Apply
      - name: Terraform Apply
        working-directory: ${{ inputs.ENVIRONMENT }}  # Runs in Dev/, Prod/, or Stage/
        run: |
          terraform apply -auto-approve tfplan
          echo "Terraform apply completed successfully."
      # Upload Terraform state file as an artifact to github
      - name: Upload Terraform State
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state-${{ inputs.ENVIRONMENT }}  # Environment-specific artifact name
          path: ${{ inputs.ENVIRONMENT }}/${{ env.STATE_FILE }}  # Path to the state file in the subdirectory
